

1) List 5 aggregate functions and explain, in your own words, what they are for. 
    Include a real world example for each. If you can’t list these from memory, do these flashcards until you can!

    SUM: Add the values that meet the conditional in the select statement.  This can be used to calculate the total of an order cart.
    AVG: Returns the average of the values that meet the conditional in the select statement.  This could be used to calculate the batting average of a player for a given amount of games.
    COUNT: Return the number of values that meet the conditional in the select statement.  This could be used if you wanted to know the number of people who's first name is Jason in your employee's list.
    MIN: Returns the lowest value that meets the conditional in the select statement.  This could be used to find the youngest person in a group.
    MAX: Returns the largest value that meets the conditional in the select statement.  This could be used to find the oldest person in the group, or the most expensive item in a store.

2) Given this donations table, write queries and include the output for the following:
        The total of all donations received in the past year.
        SELECT SUM(amount) FROM donations;

           sum    
        ----------
        993.0000

        The total donations over time per donor (e.g. if Tanysha has donated 3 times with the amounts $25, $30, and $50, then the result would be | Tanysha | 105 |).
        SELECT SUM(amount) AS amount,donor 
        FROM donations 
        GROUP BY donor;

         amount  |   donor    
        ----------+------------
        15.0000 | Arya
        15.0000 | Arya
        30.0000 | Arya
        25.0000 | Bran
        75.0000 | Brienne
        20.0000 | Bronn
        10.0000 | Daario
        102.0000 | Daenerys
        71.0000 | Daenerys
        7.0000 | Gilly
        25.0000 | Jon
        120.0000 | Margaery
        45.0000 | Melisandre
        10.0000 | Missandei
        25.0000 | Missandei
        30.0000 | Missandei
        25.0000 | Missandei
        70.0000 | Petyr
        20.0000 | Samwell
        33.0000 | Sansa
        5.0000 | Theon
        15.0000 | Theon
        50.0000 | Tormund
        50.0000 | Tyrion
        10.0000 | Tyrion
        60.0000 | Tyrion
        30.0000 | Ygritte

        The average donation per donor.
        SELECT AVG(amount) AS amount, donor
        FROM donations
        GROUP BY donor;

                amount        |   donor    
        ----------------------+------------
        25.0000000000000000 | Bran
        20.0000000000000000 | Arya
        86.5000000000000000 | Daenerys
        30.0000000000000000 | Ygritte
        50.0000000000000000 | Tormund
        33.0000000000000000 | Sansa
        20.0000000000000000 | Samwell
        45.0000000000000000 | Melisandre
        20.0000000000000000 | Bronn
        22.5000000000000000 | Missandei
        40.0000000000000000 | Tyrion
        7.0000000000000000 | Gilly
        75.0000000000000000 | Brienne
        120.0000000000000000 | Margaery
        25.0000000000000000 | Jon
        10.0000000000000000 | Daario
        10.0000000000000000 | Theon
        70.0000000000000000 | Petyr

        The number of donations over $100.
        
        SELECT COUNT(amount) 
        FROM donations 
        WHERE amount > 100;

         count 
        -------
            2
        The largest donation received in a single instance from a single donor.

        SELECT MAX(amount)
        FROM donations;

           max    
        ----------
        120.0000

        The smallest donation received.

        SELECT MIN(amount)
        FROM donations;

          min   
        --------
        5.0000

    How would you determine the display order of data returned by your SELECT statement?

        I'd use the ORDER BY to determine the order the rows are displayed on.

    What is a real world situation where you would use OFFSET?

        Using OFFSET and LIMIT could be used to limit the amount of data retrieved to only what can be displayed on one page.

    Why is it important to use ORDER BY when limiting your results?

        If you don't order the data by a relevant column you could receive the incorrect data from the query.  For instance 
        if you need to get the 10 lowest priced items you would have to order the data from lowest price to greatest price before
        limiting the result to 10.

    What is the difference between HAVING and WHERE?

        The WHERE clause filters the query before the aggregate function is applied while the the HAVING filters the values
        after the aggregate function has been applied.

    Correct the following SELECT statement:

     SELECT id, SUM (amount)
     FROM payment
     HAVING SUM (amount) > 200;

     SELECT SUM(amount) id, amount
     FROM payment
     HAVING SUM(amount) > 200;

    Follow the instructions for the scenarios below:
        Given this cats table from the previous checkpoint, list all cats organized by intake date.

        SELECT * FROM cats ORDER BY intake_date;

         id |   name   | gender | age | intake_date | adoption_date 
        ----+----------+--------+-----+-------------+---------------
        1 | Mushi    | M      |   1 | 2016-01-09  | 2016-03-22
        2 | Seashell | F      |   7 | 2016-01-09  | 
        3 | Azul     | M      |   3 | 2016-01-11  | 2016-04-17
        4 | Victoire | M      |   7 | 2016-01-11  | 2016-09-01
        5 | Nala     | F      |   1 | 2016-01-12  | 

        Given this adoptions table, determine the 5 most recent adoptions to be featured for a social media promotion called "Happy Tails" which lists recent successful adoptions.

        SELECT cat, date
        FROM adoptions
        ORDER BY date DESC
        limit 5;

        There is a potential adopter looking for an adult female cat. In the most efficient way possible, list all female cats 2 or more years old from the cats table.

        SELECT name 
        FROM cats 
        WHERE gender='F' AND age > 2;

           name   
        ----------
        Seashell

        From the donations table (from problem #2), 
        find the top 5 donors with the highest cumulative donation amounts to be honored as “Platinum Donors”.

        SELECT SUM(amount) AS amount, donor
        FROM donations
        GROUP BY donor
        ORDER BY amount DESC
        LIMIT 5;

          amount  |   donor   
        ----------+-----------
        173.0000 | Daenerys
        120.0000 | Margaery
        120.0000 | Tyrion
        90.0000 | Missandei
        75.0000 | Brienne

        From the donations table (from problem #2), find donors 6-15 with the next highest cumulative donation amounts to be honored as “Gold Donors”.

        SELECT SUM(amount) AS amount, donor
        FROM donations
        GROUP BY donor
        ORDER BY amount DESC
        LIMIT 10 OFFSET 5;

         amount  |   donor    
        ---------+------------
        70.0000 | Petyr
        60.0000 | Arya
        50.0000 | Tormund
        45.0000 | Melisandre
        33.0000 | Sansa
        30.0000 | Ygritte
        25.0000 | Bran
        25.0000 | Jon
        20.0000 | Bronn
        20.0000 | Samwell